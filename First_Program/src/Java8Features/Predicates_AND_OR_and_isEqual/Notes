In Java 8, **Predicate** is a functional interface introduced in the `java.util.function` package. It is mainly used for evaluating conditions (returning `true` or `false`) and is commonly used in functional programming with streams and lambdas.

---

### üî∑ **Predicate Functional Interface**

```java
@FunctionalInterface
public interface Predicate<T> {
    boolean test(T t);
}
```

---

### üîπ Common Methods in `Predicate`

1. **and(Predicate other)** ‚Äì Combines two predicates using logical **AND**.
2. **or(Predicate other)** ‚Äì Combines two predicates using logical **OR**.
3. **negate()** ‚Äì Negates the result of the predicate.
4. **isEqual(Object targetRef)** ‚Äì Returns a predicate that tests if two arguments are equal.

---

## ‚úÖ Examples

Let's walk through all of these with simple examples:

---

### 1Ô∏è‚É£ **Basic Predicate Example**

```java
import java.util.function.Predicate;

public class PredicateDemo {
    public static void main(String[] args) {
        Predicate<Integer> isEven = num -> num % 2 == 0;
        System.out.println(isEven.test(10));  // true
        System.out.println(isEven.test(11));  // false
    }
}
```

---

### 2Ô∏è‚É£ **Predicate AND Example**

```java
import java.util.function.Predicate;

public class PredicateAnd {
    public static void main(String[] args) {
        Predicate<String> startsWithA = str -> str.startsWith("A");
        Predicate<String> endsWithX = str -> str.endsWith("x");

        Predicate<String> combined = startsWithA.and(endsWithX);

        System.out.println(combined.test("Apex"));      // true
        System.out.println(combined.test("Ape"));       // false
        System.out.println(combined.test("Box"));       // false
    }
}
```

---

### 3Ô∏è‚É£ **Predicate OR Example**

```java
import java.util.function.Predicate;

public class PredicateOr {
    public static void main(String[] args) {
        Predicate<Integer> isEven = num -> num % 2 == 0;
        Predicate<Integer> isGreaterThan10 = num -> num > 10;

        Predicate<Integer> combined = isEven.or(isGreaterThan10);

        System.out.println(combined.test(4));    // true (even)
        System.out.println(combined.test(11));   // true (>10)
        System.out.println(combined.test(7));    // false
    }
}
```

---

### 4Ô∏è‚É£ **Predicate negate() Example**

```java
import java.util.function.Predicate;

public class PredicateNegate {
    public static void main(String[] args) {
        Predicate<String> isEmpty = String::isEmpty;

        Predicate<String> isNotEmpty = isEmpty.negate();

        System.out.println(isNotEmpty.test(""));      // false
        System.out.println(isNotEmpty.test("Hello")); // true
    }
}
```

---

### 5Ô∏è‚É£ **Predicate isEqual() Example**

```java
import java.util.function.Predicate;

public class PredicateIsEqual {
    public static void main(String[] args) {
        Predicate<String> isEqualToHello = Predicate.isEqual("Hello");

        System.out.println(isEqualToHello.test("Hello")); // true
        System.out.println(isEqualToHello.test("World")); // false
    }
}
```

---

## üìå Summary Table

| Method            | Description                            | Example Use Case                       |
| ----------------- | -------------------------------------- | -------------------------------------- |
| `test()`          | Evaluates a condition                  | `isEven.test(10)`                      |
| `and()`           | Combines two predicates with AND logic | `isEven.and(isPositive)`               |
| `or()`            | Combines two predicates with OR logic  | `isEven.or(isGreaterThan10)`           |
| `negate()`        | Reverses the condition                 | `isEven.negate()`                      |
| `isEqual(Object)` | Compares for equality                  | `Predicate.isEqual("Hello").test(str)` |

---

